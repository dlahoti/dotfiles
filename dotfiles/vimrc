syntax on
filetype plugin indent on
set nocompatible
set encoding=utf-8
set showcmd

call plug#begin('~/.vim/plugged')

" from vim-plug docs
function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

Plug 'sjl/gundo.vim'

Plug 'jonathanfilip/vim-lucius'

"Plug 'scrooloose/syntastic'
"let g:syntastic_mode_map = {'mode': 'active', 'passive_filetypes': ['fish', 'tex']}

Plug 'neomake/neomake'
autocmd! BufWritePost * Neomake

let isnotefile = match(@%, 'note:') == 0
Plug 'xolox/vim-misc', Cond(isnotefile)
Plug 'xolox/vim-notes', Cond(isnotefile)
let g:notes_directories = ['~/Athena/Documents/notes']

Plug 'tpope/vim-eunuch'

Plug 'sbl/scvim', { 'for': 'supercollider' }
let g:sclangTerm = "urxvtc -e"

Plug 'lukerandall/haskellmode-vim', { 'for': 'haskell' }

Plug 'def-lkb/vimbufsync', { 'for': 'coq' }
Plug 'the-lambda-church/coquille', { 'for': 'coq' }
au FileType coq call coquille#FNMapping()
au FileType coq map <F8> :CoqLaunch<CR>
au FileType coq map <F9> :CoqKill<CR>

Plug 'vim-scripts/delview'

call plug#end()

colorscheme lucius
let g:lucius_no_term_bg=1
LuciusBlack

set tabstop=8 softtabstop=8 shiftwidth=8
"set expandtab
set ai
set si

set showbreak=↪\ 
set list
set listchars=tab:»\ ,eol:↲,nbsp:␣,trail:█,extends:⟩,precedes:⟨

set backspace=indent,eol,start

set hlsearch
set incsearch
set ignorecase
set smartcase

set noerrorbells
set novisualbell
set t_vb=
set tm=500

set number
set lazyredraw
set nocursorline
set showmatch

set ttyfast
set mouse=a

set foldenable
nnoremap <space> za
set foldmethod=syntax

autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent! loadview

set undodir=~/.vim/undo
set undofile
set undolevels=1000
set undoreload=10000

let mapleader=","

noremap <silent> <leader>w :call ToggleWrap()<CR>
function ToggleWrap()
  if &wrap
    echo "Wrap OFF"
    setlocal nowrap
  else
    echo "Wrap ON"
    setlocal wrap linebreak
  endif
endfunction

set wrap linebreak
noremap  <buffer> <silent> <Up>   gk
noremap  <buffer> <silent> <Down> gj
noremap  <buffer> <silent> k      gk
noremap  <buffer> <silent> j      gj
noremap  <buffer> <silent> 0      g0
noremap  <buffer> <silent> ^      g^
noremap  <buffer> <silent> $      g$
noremap  <buffer> <silent> <Home> g<Home>
noremap  <buffer> <silent> <End>  g<End>
inoremap <buffer> <silent> <Up>   <C-o>gk
inoremap <buffer> <silent> <Down> <C-o>gj
inoremap <buffer> <silent> <Home> <C-o>g<Home>
inoremap <buffer> <silent> <End>  <C-o>g<End>

nnoremap <leader>u :GundoToggle<CR>

au BufEnter *.hs compiler ghc
let g:haddock_browser = "xdg-open"
let g:haddock_browser_callformat="sh -c '%s file://%s >/dev/null 2>&1 &'"
autocmd FileType haskell setlocal expandtab tabstop=2 softtabstop=2 shiftwidth=2

autocmd FileType tex setlocal indentexpr&
let g:tex_flavor = "latex"

nnoremap ; :
vnoremap ; :

ca W SudoWrite
ca w!! SudoWrite
ca ww SudoWrite

dig (t 9115 (m 9116 (b 9117 )t 9118 )m 9119 )b 9120 It 8992 Im 9134 Ib 8993 <( 10216 )> 10217 ns 8345 /E 8713 /C 8836 ~= 8773 TO 8868 BO 8869 TS 8866 DT 8872 NN 8469 RR 8477 -. 8230
